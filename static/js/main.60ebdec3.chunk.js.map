{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js","components/logo.svg","models/index.js"],"names":["Header","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Component","observer","history","useHistory","useStores","UserStore","AuthStore","useEffect","pullUser","src","LogoUrl","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","console","log","push","Footer","footer","Loading","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","this","Auth","getCurrentUser","observable","action","limit","newList","list","concat","isLoading","Uploader","find","page","append","length","hasMore","finally","newFilename","filename","newFile","file","isUpoading","serverFile","Promise","resolve","reject","add","err","values","password","login","user","resetUser","register","HistoryStore","reset","ImageStore","context","createContext","stores","useContext","module","exports","AV","init","appId","appKey","serverURL","User","setUsername","setPassword","signUp","loginedUser","logIn","logOut","current","item","Object","avFile","File","set","save","query","Query","include","skip","descending","equalTo","results"],"mappings":"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","file":"static/js/main.60ebdec3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LogoUrl from './logo.svg';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from 'antd';\nimport { useStores } from '../stores';\nimport { observer } from 'mobx-react';\n\n\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  padding: 10px 100px;\n  background-color: #02101f;\n  color: #fff;\n`;\n\nconst Logo = styled.img`\n  height: 30px;\n`;\n\nconst StyledLink = styled(NavLink)`\n  color: #fff;\n  margin-left: 30px;\n\n  &.active {\n    border-bottom: 1px solid #fff;\n  }\n`;\n\nconst Login = styled.div`\n  margin-left: auto;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-left: 10px;\n`;\n\n\nconst  Component = observer(() => {\n\n  const history = useHistory();\n  const { UserStore, AuthStore } = useStores();\n\n  const handleLogout = () => {\n    AuthStore.logout();\n  };\n\n  const handleLogin = () => {\n    console.log('跳转到登录页面')\n    history.push('/login');\n  };\n\n  const handleRegister = () => {\n    console.log('跳转到注册页面')\n    history.push('/register');\n  }\n\n  useEffect(()=>{\n    UserStore.pullUser();\n  },[])\n\n  return (\n    <Header>\n      <Logo src={LogoUrl} />\n      <nav>\n        <StyledLink to=\"/\" activeClassName=\"active\" exact>首页</StyledLink>\n        <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\n        <StyledLink to=\"/about\" activeClassName=\"active\">关于我</StyledLink>\n      </nav>\n      <Login>\n        {\n          UserStore.currentUser ? <>\n            {UserStore.currentUser.attributes.username} <StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\n          </> :<>\n          <StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\n          <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\n          </>\n\n        }\n      </Login>\n\n    </Header>\n  );\n});\n\nexport default Component;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Footer = styled.footer`\n  padding: 10px 100px;\n  text-align: center;\n  font-size: 12px;\n  color: #aaa;\n`;\n\nfunction Component() {\n  return (\n    <Footer>\n      <p>Footer</p>\n    </Footer>\n  );\n}\n\nexport default Component;","import React from 'react';\n\nexport default function Loading() {\n  return (\n    <div>Loading...</div>\n  );\n}\n\n","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Loading from './components/Loading';\n\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\n\nconsole.log(Loading)\n// import Home from './pages/Home';\n// import History from './pages/History';\n// import About from './pages/About';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst History = lazy(() => import('./pages/History'));\nconst About = lazy(() => import('./pages/About'));\nconst Login = lazy(() => import('./pages/Login'));\nconst Register = lazy(() => import('./pages/Register'));\n\n\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/history\" component={History} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\nimport Model from './models';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { observable, action } from 'mobx';\nimport { Auth } from '../models';\n\nclass UserStore {\n  @observable currentUser = null;\n\n  @action pullUser() {\n    this.currentUser = Auth.getCurrentUser()\n  }\n\n  @action resetUser() {\n    this.currentUser = null;\n  }\n}\n\n\nexport default new UserStore() ;\n","import { observable, action } from 'mobx';\nimport { Uploader } from '../models';\nimport { message } from 'antd';\n\nclass HistoryStore {\n  @observable list = [];\n  @observable isLoading = false;\n  @observable hasMore = true;\n  @observable page = 0;\n  limit = 10;\n\n  @action append(newList) {\n    this.list = this.list.concat(newList);\n  }\n\n  @action find() {\n    this.isLoading = true;\n    Uploader.find({page: this.page, limit: this.limit})\n      .then(newList => {\n        this.append(newList);\n        this.page++;\n        if(newList.length < this.limit) {\n          this.hasMore = false;\n        }\n      }).catch(error => {\n        message.error('加载数据失败');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n  }\n\n  @action reset() {\n    this.list = [];\n    this.isLoading = false;\n    this.hasMore = true;\n    this.page = 0;\n  }\n\n}\n\n\nexport default new HistoryStore();\n","import { observable, action } from 'mobx';\nimport { Uploader } from '../models';\nimport { message } from 'antd';\n\nclass ImageStore {\n  @observable filename = \"\";\n  @observable file = null;\n  @observable isUpoading = false;\n  @observable serverFile = null;\n\n  @action setFilename(newFilename) {\n    this.filename = newFilename;\n  }\n\n  @action setFile(newFile) {\n    this.file = newFile;\n  }\n\n  @action upload() {\n    this.isUpoading = true;\n    this.serverFile = null;\n    return new Promise((resolve, reject) => {\n      Uploader.add(this.file, this.filename)\n      .then(serverFile => {\n        this.serverFile = serverFile;\n        resolve(serverFile);\n      }).catch(err => {\n        message.error('上传失败');\n        reject(err);\n      }).finally(() => {\n        this.isUpoading = false;\n      });\n    })\n      \n  }\n\n  @action reset() {\n    this.isUpoading = false;\n    this.serverFile = null;\n  }\n\n\n}\n\n\nexport default new ImageStore();\n","import { observable, action } from 'mobx';\nimport { Auth } from '../models';\nimport UserStore from './user';\nimport HistoryStore from './history';\nimport ImageStore from './image';\nimport { message } from 'antd';\n\nclass AuthStore {\n  @observable values = {\n    username: '',\n    password: ''\n  };\n\n  @action setUsername(username) {\n    this.values.username = username;\n  }\n\n  @action setPassword(password) {\n    this.values.password = password;\n  }\n\n  @action login() {\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password)\n      .then(user => {\n        UserStore.pullUser();\n        resolve(user);\n      }).catch(err => {\n        UserStore.resetUser();\n        message.error('登录失败');\n        reject(err);\n      })\n    });\n  }\n\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n      .then(user => {\n        UserStore.pullUser();\n        resolve(user);\n      }).catch(err => {\n        UserStore.resetUser();\n        message.error('注册失败');\n        reject(err);\n      })\n    });  \n  }\n\n  @action logout() {\n    Auth.logout();\n    UserStore.resetUser();\n    HistoryStore.reset();\n    ImageStore.reset();\n  }\n\n}\n\n\nexport default new AuthStore();\n","import React, { createContext, useContext } from 'react';\nimport AuthStore from './auth';\nimport UserStore from './user';\nimport ImageStore from './image';\nimport HistoryStore from './history';\n\nconst context = createContext({\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n});\n\nwindow.stores = {\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n};\n\nexport const useStores = () => useContext(context);","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import AV, { Query, User } from 'leancloud-storage';\n\nAV.init({\n  appId: \"UqBaAsQMqOQB3rLwNGLTKtOF-gzGzoHsz\",\n  appKey: \"uv9EyQmkgX7UjUt4TeVUBhVa\",\n  serverURL: \"https://uqbaasqm.lc-cn-n1-shared.com\"\n});\n\nconst Auth = {\n  register(username, password) {\n    let user = new User();\n    user.setUsername(username);\n    user.setPassword(password);\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\n    });\n  },\n\n  login(username, password) {\n    console.log('------')\n    console.log(username, password)\n    return new Promise((resolve, reject) => {\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error));\n    });\n  },\n\n  logout() {\n    User.logOut();\n  },\n\n  getCurrentUser() {\n    return User.current();\n  }\n\n};\n\nconst Uploader = {\n  add(file, filename) {\n    const item = new AV.Object('Image');\n    const avFile = new AV.File(filename, file);\n    item.set('filename', filename);\n    item.set('owner', AV.User.current());\n    item.set('url', avFile);\n    return new Promise((resolve, reject) => {\n      item.save().then(serverFile => resolve(serverFile), error => reject(error));\n    });\n  },\n\n  find({page=0, limit=10}) {\n    const query = new AV.Query('Image');\n    query.include('owner');\n    query.limit(limit);\n    query.skip(page*limit);\n    query.descending('createdAt');\n    query.equalTo('owner', AV.User.current());\n    return new Promise((resolve, reject) => {\n      query.find()\n        .then(results => resolve(results))\n        .catch(error => reject(error))\n    });\n  }\n}\n\n\nexport {\n  Auth,\n  Uploader\n};"],"sourceRoot":""}